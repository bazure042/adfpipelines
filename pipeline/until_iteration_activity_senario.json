{
	"name": "until_iteration_activity_senario",
	"properties": {
		"activities": [
			{
				"name": "Until1",
				"type": "Until",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(int(variables('iteration')),11)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Metadata1",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "sample_file_sftp",
									"type": "DatasetReference"
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "SftpReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"disableChunking": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get Metadata1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('Get Metadata1').output.exists",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait1",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 60
										}
									},
									{
										"name": "Set variable1",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Wait1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "iteration",
											"value": {
												"value": "@string(add(int(variables('counter')),1))",
												"type": "Expression"
											}
										}
									},
									{
										"name": "Set variable1_copy1",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Set variable1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "counter",
											"value": {
												"value": "@variables('iteration')",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Copy data1",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"storeSettings": {
													"type": "SftpReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false,
													"disableChunking": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "DelimitedTextSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "DelimitedTextWriteSettings",
													"quoteAllText": true,
													"fileExtension": ".txt"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": true,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "sample_file_sftp",
												"type": "DatasetReference"
											}
										],
										"outputs": [
											{
												"referenceName": "adls_output",
												"type": "DatasetReference"
											}
										]
									},
									{
										"name": "Set variable2",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "Copy data1",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"variableName": "iteration",
											"value": {
												"value": "@string(12)",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "If Condition2",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "If Condition1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(not(activity('Get Metadata1').output.exists),equals(variables('iteration'),11))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Fail1",
										"type": "Fail",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"message": "SFTP Files are not ready for Download. Please work with source team",
											"errorCode": "Customer_File_Not_Exists"
										}
									}
								]
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			}
		],
		"variables": {
			"iteration": {
				"type": "String",
				"defaultValue": "0"
			},
			"counter": {
				"type": "String",
				"defaultValue": "0"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-03-24T02:42:02Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}